#!/bin/bash

set -e
set -x

exit-script()
{
    echo $1
    exit $2
}

command-wrapper()
{
    if [ $test == "true" ]; then
        echo "    Simulating: $@"
    else
        $@ || exit 1
    fi
}

command-wrapper-safe()
{
    if [ $test == "true" ]; then
        echo "    Simulating safe: $@"
    else
        $@
    fi
}

create-tar-filename()
{
    dockername=$1
    tag=${dockername##*/}
    name=${dockername%/*}
    name=${name##*/}
    echo "$docker/$name:$tag.tar"
}

operation=$1

test=false
if [ "$2" == "test" ]; then
    test=true
    AGENT_TEMPDIRECTORY="/tmp"
    AZURE_CONTAINER_REGISTRY="phillyregistry"
    AZURE_CONTAINER_REGISTRY_URL="phillyregistry.azurecr.io/"
fi

if [ "$operation" == "build" ]; then
    dockerfile="$AGENT_TEMPDIRECTORY/modified_dockers"
    deletedDockerfile="$AGENT_TEMPDIRECTORY/deleted_dockers"
elif [ "$operation" == "push" ]; then
    dockerfile="$AGENT_TEMPDIRECTORY/modified_dockers"
elif [ "$operation" == "delete" ]; then
    dockerfile="$AGENT_TEMPDIRECTORY/deleted_dockers"
else
    exit-script "ERROR: $operation is not a valid operation" 1
fi

echo ""
echo "************* Performing $operation on Dockers *************"

# Do nothing if there were no dockers to work on
if [ ! -f "$dockerfile" ]; then
    exit-script "There are no dockers, no need to perform this operation" 0
fi

# Skip the deleted ones and include only the newly modified ones
dockers=$(comm -23 <(cat "$dockerfile" | tr ";" "\n") <(cat "$deletedDockerfile" | tr ";" "\n"))
echo "The following dockers are to be operated on:"
for docker in $dockers; do
    echo "    -- $docker"
done
echo ""


for docker in $dockers; do

    docker_type_prefix="custom"
    docker_name="${docker/'dockers/registry-jobs/'/''}"
    docker_name_ap=$docker_name
    if  [[ $docker_name != custom* ]] ; then
        docker_type_prefix=${docker_name%%/*}
        docker_name_ap="custom-"$docker_name
    fi

    full_docker="${docker%/*}:${docker##*/}"
    full_docker="${full_docker/'dockers/registry-'/$AZURE_CONTAINER_REGISTRY_URL'philly/'}"
    full_test_docker="${full_docker/$docker_type_prefix/'test'}"
    small_docker="${full_docker##*/}"
    cache_from=""

    docker_repository="${full_docker#$AZURE_CONTAINER_REGISTRY_URL}"
    test_docker_repository="${docker_repository/$docker_type_prefix/'test'}"

    # Remove this when AP sync is deprecated
    docker_name_ap="${docker_name_ap//'/'/'-'}"
    full_docker_ap="phillyonapprod.azurecr.io/philly-prod-cy4/"$docker_name_ap

    if [ "$operation" == "build" ]; then
        tarfile=$(create-tar-filename)
        if [ -f "$tarfile" ]; then
            # Right now this is still in testing phase.  There appears to be large upload times.
            # The user can use this feature but it is recommended not to use.  For the time
            # being we will limit the announcements of this feature.
            echo "    Found tar file for the image, loading from the file $tarfile."
            command-wrapper docker load --input "$tarfile"
        else
            echo "Logging in before pulling the images"
            command-wrapper-safe az acr login --name $AZURE_CONTAINER_REGISTRY

            echo "Begin building and pushing images for build"
            inherits=`grep -i ^FROM $docker/Dockerfile* | awk '{print $2}'`
            echo "Pulling $inherits"
            command-wrapper-safe docker pull $inherits
            echo ""
            echo "Pulling $full_docker"
            command-wrapper-safe docker pull $full_docker && cache_from=" --cache-from $full_docker "
            echo ""
            echo "Building $docker with name $small_docker with cache: $cache_from"
            command-wrapper docker build -t $small_docker $cache_from $docker
            echo ""
            echo "Tagging $small_docker to $full_docker"
            command-wrapper docker tag $small_docker $full_docker
            echo ""

            echo "Logging in before tagging and pushing the images"
            command-wrapper-safe az acr login --name $AZURE_CONTAINER_REGISTRY

            # Pushing test image
            echo "******Tagging and pushing images for testing*******"
            echo "Pulling $full_test_docker"
            command-wrapper-safe docker pull $full_test_docker && cache_from=" --cache-from $full_test_docker"
            echo ""
            echo "Tagging $small_docker to ${full_test_docker}"
            command-wrapper docker tag $small_docker ${full_test_docker}
            echo ""
            echo "Pushing $full_test_docker"
            command-wrapper docker push ${full_test_docker}
            echo ""

            # Remove this when AP sync is deprecated
            echo "Tagging for AP: $small_docker to $full_docker_ap"
            command-wrapper docker tag $small_docker $full_docker_ap
            echo ""
        fi
    elif [ "$operation" == "push" ]; then
        echo "Logging in before pushing the image"
        command-wrapper-safe az acr login --name $AZURE_CONTAINER_REGISTRY

        echo "Pushing ${full_docker}"
        command-wrapper docker push $full_docker
        latest=$(grep "$small_docker" "${docker%/*}/latest" || exit 1)
        if [ ! -z $latest ]; then
            echo "Pushing ${full_docker%:*}:latest"
            command-wrapper docker tag "$full_docker" "${full_docker%:*}:latest"
            command-wrapper docker push "${full_docker%:*}:latest"

            # Remove this when AP sync is deprecated
            echo "Pushing ${full_docker_ap%:*}:latest"
            command-wrapper az account set --subscription PhillyInt
            command-wrapper az acr login --name phillyonapprod

            command-wrapper az account set --subscription PhillyInt
            command-wrapper docker push "${full_docker_ap%:*}:latest"

            command-wrapper az account set --subscription PhillyExt
            command-wrapper az acr login --name phillyregistry
        fi

        # Remove the test docker once published to custom repository
        echo "Deleting ${test_docker_repository}"
        command-wrapper-safe az acr repository delete --name $AZURE_CONTAINER_REGISTRY --image ${test_docker_repository} -y
    elif [ "$operation" == "delete" ]; then
        command-wrapper-safe az acr repository delete --name $AZURE_CONTAINER_REGISTRY --image ${docker_repository} -y
    fi
done

echo "Successfully performed $operation on the dockers"