#!/bin/bash

# Global Variables
SCRIPT_DIR="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BUILD_DEPS="TRUE"
DEBUG="FALSE"
NO_CACHE=""
TARGET=""

exit-with-error()
{
    echo -e "$@"
    exit 1
}

# parsing command line arguments
while [[ $# > 0 ]]; do
    key="$1"

    case $key in
        -h|--help)
            echo ""
            echo "Usage: build [options] <target>"
            echo ""
            echo "Options:"
            echo "  -nd|--no-deps      - skip building of dependencies   (default - Build dependencies)"
            echo "  -nc|--no-cache     - does not use the Docker cache   (default - Build with cache)"
            echo ""
            echo "If no target is specified then all directories in inherit-dockers are built"
            echo "If a target is specified then directory (within custom-dockers) must exist"
            exit 1
            ;;
        -nd|--no-deps)
            BUILD_DEPS="FALSE"
            ;;
        -nc|--no-cache)
            NO_CACHE="--no-cache"
            ;;
        -*)
            exit-with-error "Unkown option $key"
            ;;
        *)
            if [ -n "$TARGET" ]; then
                exit-with-error "ERROR: Only one target can be specified"
            fi
            TARGET="$key"
            ;;
    esac
    shift # past argument or value
done

echo ""

docker-wrapper()
{
    # Set this variable to TRUE if you are testing changes.
    # This will stop the docker commands for debugging script.
    if [ "${DEBUG^^}" != "TRUE" ]; then
        docker $@ 
        if [ $? != 0 ]; then
            # Try with sudo
            sudo docker $@ || exit-with-error "ERROR: Docker build failed"
        fi
        echo ""
    fi
}

build-docker()
{
    local dir="$1"
    local parent_dir="$2"
    
    if [ $BUILD_DEPS == "TRUE" ] && [ ! -z $TARGET ]; then
        parent=$(grep -i ^FROM $SCRIPT_DIR/custom-dockers/$dir/Dockerfile | awk '{print $2}')
        if [ ! -d "$SCRIPT_DIR/inherit-dockers/$parent" ]; then
            exit-with-error "$SCRIPT_DIR/inherit-dockers/$parent does not exist, aborting..."
        fi
        echo "Building docker: $parent"
        echo "Build command: docker build -t $parent -f $SCRIPT_DIR/inherit-dockers/$parent/Dockerfile $NO_CACHE $SCRIPT_DIR/inherit-dockers/$parent"
        docker-wrapper build -t $parent -f $SCRIPT_DIR/inherit-dockers/$parent/Dockerfile $NO_CACHE $SCRIPT_DIR/inherit-dockers/$parent
    fi
    
    echo "Building docker: ${dir##*/}"
    echo "Build command: docker build -t ${dir##*/} -f $SCRIPT_DIR/$parent_dir/$dir/Dockerfile $NO_CACHE $SCRIPT_DIR/$parent_dir/$dir"
    docker-wrapper build -t ${dir##*/} -f $SCRIPT_DIR/$parent_dir/$dir/Dockerfile $NO_CACHE $SCRIPT_DIR/$parent_dir/$dir
}

if [ -z "$TARGET" ]; then
    BUILD_DEPS="FALSE"
    directories=$(find $SCRIPT_DIR/inherit-dockers -type d)
    
    # Loop through directories in inherit-dockers and build everything
    for directory in $directories; do
        if [ -f ${directory#./}/Dockerfile ]; then
            build-docker ${directory#./} "inherit-dockers"
        fi
    done
else
    if [ -d "$SCRIPT_DIR/custom-dockers/$TARGET" ]; then
        build-docker $TARGET "custom-dockers"
    elif [ -d "$SCRIPT_DIR/inherit-dockers/$TARGET" ]; then
        BUILD_DEPS="FALSE"
        build-docker $TARGET "inherit-dockers"
    else
        exit-with-error "$SCRIPT_DIR/custom-dockers/$TARGET does not exist, aborting..."
    fi
fi

echo "Completed Successfully"
echo ""