" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
"if filereadable("/etc/vim/vimrc.local")
"  source /etc/vim/vimrc.local
"endif

set enc=utf-8
set autoindent
set nu
set hlsearch
set listchars=tab:â€½â–¸
highlight NonText ctermfg=lightyellow
highlight SpecialKey ctermfg=lightyellow
set tabstop=2
set shiftwidth=2
set softtabstop=2
au BufRead,BufNewFile *.yml,*.yaml,*.py,*.pyw,*.c,*.h set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au BufRead,BufNewFile Makefile* set noexpandtab
" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=lightyellow guibg=lightyellow
highlight VTab ctermbg=lightgreen guibg=lightgrean
"highlight LeadWhitespace ctermbg=lightgreen guibg=lightgrean
"
" Display tabs at the beginning of a line in Python mode as bad.
au FileType python,yaml,c,cpp match BadWhitespace /^\t\+/
au FileType python,yaml,c,cpp match BadWhitespace /\s\+$/
au FileType python,yaml,c,cpp syntax match BadWhitespace /^\t\+/
au FileType python,yaml syntax match VTab /\s\{2}/ contained nextgroup=VTab
au FileType python,yaml syntax match LeadWhitespace /^\s\+/ contains=VTab
"colorscheme default
"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
