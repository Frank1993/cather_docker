#!/bin/bash

# This file is only for reference and to test the custom-built Docker feature in the Webportal.
# It will read in the values from the command line (supplied by the Philly Cluster)
# and print them to a testRunCust.txt saved in the log directory. All but the running 
# time (-r|--runningTime) are hardcoded parameters from the GUI.  The running time can be
# used in the extra parameters field of the GUI.  The main loop will run for the specified
# running time and print a statement to the output file every 5 seconds.  This is to 
# monitor through ssh (with 'tail -f -n +1 testRunCust.txt') that the script was started 
# and is running.  Making a short running time you can test that the job completes correctly.

CONFIG_FILE=NONE
DATA_DIR=NONE
LOG_DIR=$PWD
MODEL_DIR=NONE
PREV_MODEL_PATH=NONE
IS_MEMCHECK=false
EXTRA_ARGS=""
NUM_GPU=NONE
STDOUT_DIR=$PWD
IS_DEBUG=false
IS_PERF_TRACE=false
IS_GDB_WRAPPED=false

# parsing command line arguments:
while [[ $# > 0 ]]
do
key="$1"

case $key in
    -h|--help)
    echo "Usage: toolkit-execute [run_options]"
    echo "Options:"
    echo "  -n|--nGPU <num> - how many GPUs used for this job (default NONE)"
    echo "  -c|--configFile <config> - which configuration file to use (default NONE)"
    echo "  -d|--dataDir <path> - directory path to input files (default NONE)"
    echo "  -l|--logDir <path> - directory path to save the log files (default \$PWD)"
    echo "  -m|--modelDir <path> - directory path to save the model files (default NONE)"
    echo "  -s|--stdoutDir <path> - directory path to save the stdout (default \$PWD)"
    echo "  --debug - job is in debug mode (not used)"
    echo "  --perfTrace - job should run in perf trace mode (not used)"
    echo "  --gdbWrapped - job should run with GDB (default FALSE)"
    echo "  --prevModelDir - the prev model path to copy from (default None)"
    echo "  --memCheck - start job in memcheck mode (default FALSE)"
    exit 1
    ;;
    -n|--nGPU)
    NUM_GPU="$2"
    shift # pass argument
    ;;
    -c|--configFile)
    CONFIG_FILE="$2"
    shift # pass argument
    ;;
    -d|--dataDir)
    DATA_DIR="$2"
    shift # pass argument
    ;;
    -l|--logDir)
    LOG_DIR="$2"
    shift # pass argument
    ;;
    -m|--modelDir)
    MODEL_DIR="$2"
    shift # pass argument
    ;;
    -s|--stdoutDir)
    STDOUT_DIR="$2"
    shift # pass argument
    ;;
    --debug)
    IS_DEBUG=true
    ;;
    --perfTrace)
    IS_PERF_TRACE=true
    ;;
    --gdbWrapped)
    IS_GDB_WRAPPED=true
    ;;
    --prevModelDir)
    PREV_MODEL_PATH="$2"
    shift # pass argument
    ;;
    --memCheck)
    IS_MEMCHECK=TRUE
    ;;
    *)
    EXTRA_ARGS="$EXTRA_ARGS $1"
    ;;
esac
shift # past argument or value
done

echo "toolkit-execute: NUM_GPU=$NUM_GPU"
echo "toolkit-execute: CONFIG_FILE=$CONFIG_FILE"
echo "toolkit-execute: DATA_DIR=$DATA_DIR"
echo "toolkit-execute: LOG_DIR=$LOG_DIR"
echo "toolkit-execute: MODEL_DIR=$MODEL_DIR"
echo "toolkit-execute: STDOUT_DIR=$STDOUT_DIR"
echo "toolkit-execute: IS_DEBUG=$IS_DEBUG"
echo "toolkit-execute: IS_PERF_TRACE=$IS_PERF_TRACE"
echo "toolkit-execute: IS_GDB_WRAPPED=$IS_GDB_WRAPPED"
echo "toolkit-execute: PREV_MODEL_PATH=$PREV_MODEL_PATH"
echo "toolkit-execute: IS_MEMCHECK=$IS_MEMCHECK"
echo "toolkit-execute: EXTRA_ARGS=$EXTRA_ARGS"

mkdir -p $LOG_DIR

if [ "$EXTRA_ARGS" == "NONE" ]; then
    echo "commandline: caffe.bin train --solver=$CONFIG_FILE"
    caffe.bin train --solver=$CONFIG_FILE &
    while :
    do
        if ps -p $! > /dev/null; then
            sleep 600
            echo "PROGRESS: 00.00%"
        else
            echo "PROGRESS: 100.00%"
            exit
        fi
    done
fi

CONFIGB=$(basename "$CONFIG_FILE")
CONFIG_DIR=$(dirname "$CONFIG_FILE")
CONFIG_EXT="${CONFIGB##*.}"
CONFIG_NAME="${CONFIGB%.*}"
if [[ ${CONFIG_EXT} == "py" ]] ; then
    cd ${CONFIG_DIR} && python3 ${CONFIGB} --dataDir ${DATA_DIR} --modelDir ${MODEL_DIR} --logDir ${LOG_DIR} ${EXTRA_ARGS} || exit 1
elif [[ ${CONFIG_EXT} == "sh" ]] ; then
    cd ${CONFIG_DIR} && bash ${CONFIGB} --dataDir ${DATA_DIR} --modelDir ${MODEL_DIR} --logDir ${LOG_DIR} ${EXTRA_ARGS} || exit 1
elif [[ not ${CONFIG_EXT} == "config"]] ; then
    cmd="${CONFIG_FILE} --dataDir ${DATA_DIR} --modelDir ${MODEL_DIR} --logDir ${LOG_DIR} ${EXTRA_ARGS}"
    ${cmd} || exit 1
else
    MPI="NONE"
    WORK_DIR="NONE"
    CMD="--solver=$CONFIG_FILE"

    while IFS="=" read -r key value
    do
        if [ "$key" == "--mpi" ]; then
            MPI="$value"
        elif [ "$key" == "--workdir" ]; then
            WORK_DIR="$value"
        else
            CMD+=" $key=$value"
        fi
    done <<< "$(echo "$EXTRA_ARGS" | xargs | sed 's/ /\n/g')"

    if [ "$WORK_DIR" == "NONE" ]; then
        echo "workdir: $(pwd)"
    else 
        cd $WORK_DIR
        echo "workdir: $(pwd)"
    fi

    if [ "$MPI" == "NONE" ]; then
        echo "commandline: caffe.bin train $CMD"
        caffe.bin train $CMD &
    else
        echo "commandline: bmuf_caffe.bin train $CMD"
        bmuf_caffe.bin train $CMD &
    fi

    while :
    do
        if ps -p $! > /dev/null; then
            sleep 600
            echo "PROGRESS: 00.00%"
        else
            echo "PROGRESS: 100.00%"
            exit
        fi
    done
fi
