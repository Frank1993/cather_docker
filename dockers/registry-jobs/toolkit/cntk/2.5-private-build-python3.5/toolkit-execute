#!/bin/bash
set -x

function die {
    echo ""
    echo EXITCODE_RANK_$MPI_COMM_WORLD_RANK:$1
    exit $1
}

function existsExactlyOne {
    [[ $# -eq 1 && -f $1 ]]
}

# Default values
BUILD_ID=
BUILD_TYPE=gpu
BUILD_FLAVOR=release

LOG_DIR=$PWD
IS_MEMCHECK=FALSE
EXTRA_ARGS=""
IS_DEBUG=false
IS_PERF_TRACE=false

WORK_DIR=$PHILLY_HOME
BIN_BASE_DIR=$WORK_DIR/cntkbin
BIN_DIR=$BIN_BASE_DIR/bin
HDFS_DROPS=/hdfs/public/drops
MINICONDA_PATH=/usr/local/miniconda3/bin

# Parsing command line arguments:
while [[ $# > 0 ]]
do
key="$1"

case $key in
    -h|--help)
    echo "Usage: toolkit-execute [run_options]"
    echo "Options:"
    echo "  -n|--nGPU <num> - how many GPUs used for this job (default NONE)"
    echo "  -c|--configFile <config> - which configuration file to use (default NONE)"
    echo "  -d|--dataDir <path> - directory path to input files (default NONE)"
    echo "  -l|--logDir <path> - directory path to save the log files (default \$PWD)"
    echo "  -m|--modelDir <path> - directory path to save the model files (default NONE)"
    echo "  -b|--buildID <buildID> - CNTK build to use (default None)"
    echo "  -f|--flavor <flavor> - CNTK build flavor to use (default Release)"
    echo "  -t|--buildType <buildType> - CNTK build type to use (default gpu. Other options: cpu, ...)"
    echo "  --debug - job is in debug mode (not used)"
    echo "  --perfTrace - job should run in perf trace mode (not used)"
    echo "  --memCheck - start job in memcheck mode (default FALSE)"
    echo "  --gdbWrapped - job should run with GDB (default FALSE)"
    exit 1
    ;;
    -n|--nGPU)
    NUM_GPU="$2"
    shift # pass argument
    ;;
    -c|--configFile)
    CONFIG_FILE="$2"
    shift # pass argument
    ;;
    -d|--dataDir)
    DATA_DIR="$2"
    shift # pass argument
    ;;
    -l|--logDir)
    LOG_DIR="$2"
    shift # pass argument
    ;;
    -m|--modelDir)
    MODEL_DIR="$2"
    shift # pass argument
    ;;
    -b|--buildID)
    BUILD_ID="$2"
    shift # pass argument
    ;;
    -t|--buildType)
    BUILD_TYPE="$2"
    shift # pass argument
    ;;
    -f|--buildFlavor)
    BUILD_FLAVOR="$2"
    shift # pass argument
    ;;
    --debug)
    IS_DEBUG=true
    ;;
    --memCheck)
    IS_MEMCHECK=TRUE
    ;;
     --perfTrace)
    IS_PERF_TRACE=true
    ;;
    --gdbWrapped)
    IS_GDB_WRAPPED=true
    ;;
    --)
    shift # pass argument
    EXTRA_ARGS="$@"
    break
    ;;
esac
shift # past argument or value
done

# Prints out the arguments that were passed into the script
echo "toolkit-execute: CONFIG_FILE=$CONFIG_FILE"
echo "toolkit-execute: DATA_DIR=$DATA_DIR"
echo "toolkit-execute: LOG_DIR=$LOG_DIR"
echo "toolkit-execute: MODEL_DIR=$MODEL_DIR"
echo "toolkit-execute: BUILD_ID=$BUILD_ID"
echo "toolkit-execute: BUILD_TYPE=$BUILD_TYPE"
echo "toolkit-execute: IS_MEMCHECK=$IS_MEMCHECK"
echo "toolkit-execute: IS_DEBUG=$IS_DEBUG"
echo "toolkit-execute: IS_PERF_TRACE=$IS_PERF_TRACE"
echo "toolkit-execute: IS_GDB_WRAPPED=$IS_GDB_WRAPPED"
echo "toolkit-execute: EXTRA_ARGS=$EXTRA_ARGS"

# MPI Rank
MPI_COMM_WORLD_RANK=-1
MPI_COMM_LOCAL_RANK=-1
# Determine MPI version by reading link. If failed or mismatch, fall back to OpenMPI as default
if [[ $(readlink /usr/local/mpi 2>&1) == *mvapich* ]]; then
    MPI_COMM_WORLD_RANK=$MV2_COMM_WORLD_RANK
    MPI_COMM_LOCAL_RANK=$MV2_COMM_WORLD_LOCAL_RANK
else
    MPI_COMM_WORLD_RANK=$OMPI_COMM_WORLD_RANK
    MPI_COMM_LOCAL_RANK=$OMPI_COMM_WORLD_LOCAL_RANK
fi

# TODO Remove this
MPI_COMM_WORLD_RANK=0

# Download or find the build on HDFS
if [[ -z $BUILD_ID ]]; then
    echo "BUILD_ID is a required parameter. Usage: --buildId buildID; extra args"
fi
GLOBAL_CNTK_DOWNLOAD_FILE="$WORK_DIR/.cntk-download-done"
if [[ ! -f "$GLOBAL_CNTK_DOWNLOAD_FILE" ]]; then
  if [[ "$MPI_COMM_WORLD_RANK" == "0" ]]; then
      HDFS_DROP_DIR=$HDFS_DROPS/$BUILD_ID/$BUILD_TYPE

      # Check if the script exists in the local box
      existsExactlyOne $BIN_BASE_DIR/python/cntk*35*35*whl ||
      # Check if the script exists in HDFS
      existsExactlyOne $HDFS_DROP_DIR/python/cntk*35*35*whl ||
      {
        echo "Downloading artifacts from folder $BUILD_TYPE/$BUILD_FLAVOR and placing them in HDFS for caching"
        mkdir -p $HDFS_DROP_DIR/python || { echo "Philly_Error_RunJob_Permissions"; die 1; }
        azcopy --source https://phillycntkstorage.blob.core.windows.net/builds/$BUILD_ID/$BUILD_TYPE/$BUILD_FLAVOR/python/ --destination /tmp/cntk-python-whl/ --recursive --quiet --verbose || die $?
        # Copy to HDFS for caching
        mkdir -p $HDFS_DROP_DIR/python/
        cp /tmp/cntk-python-whl/cntk*35*35*whl $HDFS_DROP_DIR/python/ || die $?
        # Copy to local folder
        mkdir -p $BIN_BASE_DIR/python/ || die $?
        cp /tmp/cntk-python-whl/cntk*35*35*whl $BIN_BASE_DIR/python/ || die $?

        # Remove the temporarily copied over wheels from local temp
        rm -rf /tmp/cntk-python-whl
      }

      if [[ ! -d $BIN_BASE_DIR/python/ ]]; then
        mkdir -p $BIN_BASE_DIR/python/ || die $?
        cp $HDFS_DROP_DIR/python/* $BIN_BASE_DIR/python/ || die $?
      fi

      existsExactlyOne $BIN_BASE_DIR/python/cntk*35*35*whl || (echo "Cannot find the CNTK wheel" && die 1)

      # Activate the environment to install the CNTK Python wheel.  As we do
      # not get an exit value from activate, instead we assert that after
      # activating 'conda' exists in path.
      #
      # N.B. need to be careful of not using variables that clash with the
      # Anaconda scripts (which are source'd).
      set +x
      source $MINICONDA_PATH/activate cntk-py35
      set -x
      which conda || die $?

      # We do a PIP user install of the CNTK wheel. This goes to ~/.local by
      # default, which is on scratch. Before that, we clean up from previous
      # attempts before trying the installs.
      #
      # Additional information:
      #   https://pip.readthedocs.io/en/latest/user_guide/#user-installs
      #   https://docs.python.org/3/library/site.html#site.USER_BASE
      [[ -d ~/.local ]] &&
      {
        rm -rf ~/.local || die $?
      }
      pip install --user $BIN_BASE_DIR/python/cntk*35*35*whl || die $?

      source deactivate # deactivate

      chmod 755 $WORK_DIR
      chmod -R 777 $WORK_DIR/*
      touch ${GLOBAL_CNTK_DOWNLOAD_FILE}
    else
      echo "$MPI_COMM_WORLD_RANK: Waiting for rank=0"
      while [[ ! -f "$GLOBAL_CNTK_DOWNLOAD_FILE" ]]; do sleep 10; done
  fi
fi

# Load the libs
sudo ldconfig

source $MINICONDA_PATH/activate cntk-py35

python3 --version
# Data location is passed in through $EXTRA_ARGS
echo "python3 $CONFIG_FILE -datadir $DATA_DIR -logdir $LOG_DIR/out -outputdir $MODEL_DIR $EXTRA_ARGS"
python3 $CONFIG_FILE -datadir $DATA_DIR -logdir $LOG_DIR/out -outputdir $MODEL_DIR $EXTRA_ARGS